
{
    interface Bounds {
        rowMin:number;
        rowMax:number;

        colMin:number;
        colMax:number;

        defaultValue:string;
    }

    function execute(input:string) {
    
        // input = `
        
        // #..#.
        // #....
        // ##..#
        // ..#..
        // ..###`;

        const inputs = input.split("\n").map( (str) => str.trim() );

        const enhancementLookup:Array<string> = inputs.shift()!.split("");
        inputs.shift();
        
        const pixels:Map<string, Array<number>> = new Map<string, Array<number>>();

        for ( let [row, line] of inputs.entries() ) {
            const linePixels = line.split("");

            for ( let col = 0; col < linePixels.length; ++col ) {
                if ( linePixels[col] === "#" ) {
                    pixels.set( "" + row + "," + col, [row, col] );
                }
            }
        }

        // return execute1(enhancementLookup, pixels);
        return execute2(enhancementLookup, pixels);
    }

    function printImage( pixels:Map<string, Array<number>> ) {
        
        let output:string = "";

        const rows = 10;
        const cols = 10;

        for ( let row = -rows; row < rows; ++row ) {
            for ( let col = -cols; col < cols; ++col ) {
                const key = row + "," + col;
                if ( pixels.has(key) ) {
                    output += "#";
                }
                else {
                    output += ".";
                }
            }
            output += "\n";
        } 

        console.log(output);
    }

    function enhance(enhancementLookup:Array<string>, pixels:Map<string, Array<number>>, bounds:Bounds):Map<string, Array<number>> {

        const output:Map<string, Array<number>> = new Map<string, Array<number>>();

        function getValue(row:number, col:number, bounds:Bounds):number {

            if ( row < bounds.rowMin || row > bounds.rowMax || col < bounds.colMin || col > bounds.colMax ) {
                return bounds.defaultValue === "#" ? 1 : 0;
            }

            const key:string = row + "," + col;
            if ( pixels.has(key) ) {
                return 1;
            }
            else {
                return 0;
            }
        }

        function expandRegion( pixel:Array<number>, bounds:Bounds ):void {
            let binaryString:string = "";

            // pixel[0] is row, pixel[1] is column
            binaryString += getValue( pixel[0] - 1, pixel[1] - 1 , bounds); // top left
            binaryString += getValue( pixel[0] - 1, pixel[1]     , bounds); // top
            binaryString += getValue( pixel[0] - 1, pixel[1] + 1 , bounds); // top right
            binaryString += getValue( pixel[0]    , pixel[1] - 1 , bounds); // left
            binaryString += getValue( pixel[0]    , pixel[1]     , bounds); // middle
            binaryString += getValue( pixel[0]    , pixel[1] + 1 , bounds); // right
            binaryString += getValue( pixel[0] + 1, pixel[1] - 1 , bounds); // bottom left
            binaryString += getValue( pixel[0] + 1, pixel[1]     , bounds); // down
            binaryString += getValue( pixel[0] + 1, pixel[1] + 1 , bounds); // bottom right

            const nr:number = parseInt( binaryString, 2 );
            const pixelValue:string = enhancementLookup[ nr ];
            if( pixelValue === "#" ) {
                const key = "" + pixel[0] + "," + pixel[1];
                if ( !output.has(key) ) { // could be we're calculating the same pixels twice with our method
                    output.set(key, [pixel[0], pixel[1]] );
                }
            }
        }

        // initially I thought I could get away with this
        // but for part 2, this would skip 9x9 regions of empty space, which is a problem if those are converted to all #'s every second iteration...
        // so I had to switch to looking at every pixel as below
        // for ( let pixel of pixels.values() ) {
        //     // there's something nasty with the infinite nature of the puzzle... not in the example, but in the actual input
        //     // for the empty regions, they will all flip values if the first/last entries in enhancementLookup are opposites
        //     // for example, in the input, the item at index 0 is #, the one at 511 is ., so all empty pixels become lit after 1 iteration, unlit after the second, etc.
        //     // so we need to manage the edges differently... darned
        //     for ( let row = -1; row <= 1; ++row ) {
        //         for ( let col = -1; col <= 1; ++col ) {
        //             expandRegion( [pixel[0] + row, pixel[1] + col], bounds );
        //         }
        //     }
        // }

        for ( let row = bounds.rowMin - 1; row <= bounds.rowMax + 1; ++row ) {
            for ( let col = bounds.colMin - 1; col <= bounds.colMax + 1; ++col ) {
                expandRegion( [row, col], bounds );
            }
        }

        return output;
    }

    function calculateBounds( pixels:Map<string, Array<number>>, defaultValue:string ):Bounds {
        let rows = [...pixels.values()].map( (pixel) => pixel[0] );
        let cols = [...pixels.values()].map( (pixel) => pixel[1] );

        const output = {

            rowMin: Math.min(...rows), 
            rowMax: Math.max(...rows),

            colMin: Math.min(...cols),
            colMax: Math.max(...cols), 

            defaultValue: defaultValue
        };

        return output;
    }
    
    function execute1(enhancementLookup:Array<string>, pixels:Map<string, Array<number>>):void {
 
        printImage( pixels );
        const pixels2 = enhance( enhancementLookup, pixels, calculateBounds(pixels, ".") );
        printImage( pixels2 );

        const result = enhance( enhancementLookup, pixels2, calculateBounds(pixels2, enhancementLookup[0] ) );
        printImage( result );

        // console.log( result );

        console.log( result.size ); // should be 5347
    }
    
    function execute2(enhancementLookup:Array<string>, pixels:Map<string, Array<number>>):void {
    
        const bounds = calculateBounds(pixels, ".");
        let enhanced = enhance( enhancementLookup, pixels, bounds);

        for ( let it = 1; it < 50; ++it ){
            let defaultValue = enhancementLookup[0];

            if ( enhancementLookup[0] === "#" ) {
                // in this case, the outer regions will switch type with each iteration
                if ( it % 2 === 0 ) {
                    defaultValue = enhancementLookup[0] === "#" ? "." : "#";
                }
            }

            // previously, we assumed each iteration would change at least 1 pixel per row/column, and we could just use calculateBounds() again... 
            // that turned out to be naive, so enforce it manually here
            bounds.rowMax += 1;
            bounds.rowMin -= 1;
            bounds.colMin -= 1;
            bounds.colMax += 1;
            bounds.defaultValue = defaultValue;

            enhanced = enhance( enhancementLookup, enhanced, bounds );
        }

        console.log( enhanced.size ); // should be 17172
    }
    
    
    
    const input = `

    .##.#######....##...######.##.#.#...#.#..#..#.##...#.#.#.#.#.##..#......#..##..#.#..#.#.##.#.#...#..
    .#.#.#.##..########.....####..#..##...##.###...#########....####.##.####..##.##..####.##...#..#....#
    ##..#######....##.##.#...#.#.#.##.#...#.###########....#.##.#.#...#...#..###..#..#..#.##.#.#.##..###
    #.##....##..##....#..#.####.#..##....###.#...#.####.#..#........#..####..##.#####.#..#.#.#..#...##.#
    ..##.####...#..#.#.####..#.####....#....#.##.##.####...#..#....####..........##.....###.#..#.####.#.
    ##.#.#.###.##..#..#...#.###.####.#...#.##.#.##...###.#.####.#.##......###.##.###..#..#.....##.###...
    #.#.#####.#######.######..##.#.....#.#.##...#..###.##.#.#....#.....#.##..#.##.#######..##..#....#..#
    ...#.##.##.#...###.#...#....#.#...##..##.###......#.#.####....####.#######....###..###...#...#....##
    .##..##.....##.###..#..##..#......##.#.##...##.#.#.#.##...#####.##.....#....#.##.#.#.#....###.##.#..
    ..####.##..#.###..#....#..####....#.#.###.####.#....##..#.#.##.....##.###.##.###..##......#....#.#..
    #.#.##.....#.##.###..##..####.#...#..##.#.#.##..##......#..###.######.#.##..##.###.#####.#.........#
    .#.#.#.####.#.####.#.#.#.#########..##.#.#.....#.####.#.#.#..###.#..#..##..#.#.#.##........#..#.####
    ######.###..##.##.#.##.##...#.......#.#..#..##.#..#....#.#...##.#.###.#..##.##..##..#....###.#.###..
    #..#..#####......####.#.#####...#...##..##.#..###.....#..#.#...######.##.######..#.##.###.#...#...##
    ..#####.#.#...##.###.####...#..##.##..##.##.#.#..####..#.####....#.#..#....##.##.##..#..##..##.#..#.
    ....#####.##..##.###.##...#.##.#.##....##...###..#...####.#.#..#..###...##..##.###.##.##...###.###..
    ....##......#....##..##.#.###..###..##.....##.#.#.#.#.###.###..#.##.####..#.#..#...#...##...#.##.##.
    ##....##....#.#...#......#..#.#.#..#..##.##..#...###....#.#..#.#.###.###..######.##...##..##...##.#.
    ##.#..###..#..##...##.#..#...###...#..####.#....####..##.###.##...#....#####.##...#............#.#..
    ..##..#..###.#...##.#.##.#....###.#...#.#.###..#.#..#.##...#.#.###.###.####..#.#####.###..#.#...#..#
    ..##..##.#..###.#..#.##.##..#.##.##.####......####.###..#.##..#.#....#.##...###...##.##.##.##.#.#.##
    #.##.#.#.#.###.#..#.##.#.#.####...#.#.###.##.##..#.#.#.###.#.##.##.#.#.#.###...##.....#......#...###
    .##..#########.####.####.#.##....#....#.#.#.#..#.#..##.###.###....###...#..#.##..#..##..#..#...##.##
    ..###..##.##..#.#....##..##..#.####..#...#.#.####.#####..##....##.....#....#...####...##...###.####.
    ########.##..##.##...##.##..###...#####.####.#.#.#.#.######...##..####..##..##....#..##.....###.####
    .##.....#..#....#.####...#.###..####...##.#...###.##...##..#..###.#..#.#####...##...#..##.##..###...
    .###....#.#####....#.#....#.###.......#######.#...##...#..#.#....#..##..###.####.....#.#.##..##.##..
    #...#.##.#.##.#.##...###.#..#.####...##...####.#...#.####.#.##...#...##.......#..#......#.##.#..#.#.
    ..#####..#......#.#..#...#...#..#.....##.#...##..###.......##..##..#.#....###.#######..#...#.#...##.
    .......##.###....#.##....####..#..#.####.#.###########.#..#....###.#.###.#.##...#.#...###.#.#.....#.
    .###.##...###....###..#........##.......##...#.###...##.##..#....##.....##.##....##..#...#.##.#..##.
    ####...#..##......###.##..#.#######.#.#..##...#.#.#...#####.####...########.#..#..###.############..
    #.#.#..##....#.....##...#.#####.##.#####...#....#.##.#..#.##.##...###..#.##.#.###.###..#.#.....#..#.
    .####.#####..#.##.#.###.##..#.#.##...#...#.#.....###..#..#.#...####...#...##.###.###..##..#.....##..
    ##...#...##..####....#.#.####...#..##.....#.##...###..##.#.#.#.....##.##.#.........##...###..##....#
    ####.#.##....#.....##.#....##.......#.#.#.#.###..#.###...###..#.##.###...#..###...###...#...##.#.###
    .#...#.#######.###########..#..###.##..#.##.##...#..###....#######.##..#.#....####.#..##...#...#....
    ###..#..##.#.##.##....#..#.#.##...#####.##......#.##....#.##..##...#.##.#.##.##...#.#.#.#....#.##..#
    .##....#..#..#...#..#.#....#.#####...#..#.....#....#.#....##...##.##..#..#..........#.#.###...##.#.#
    #....#.####...######.#####.#...##..#.#...##..##...#.##.#.##.####.#####.....###..#..#.#.##.##.#..#...
    ..##..###.####.##.....###.###...#....##.#.#...#.....##....#.#..#..#####..##.#.###.#..##.#.###...#.#.
    ..##.##...#..#..#.#..#.#..##.#.#.......#.#.#...#.#..#..##..##.###.###...###..##...#####...#..#.###.#
    #.#.#.....##........#####.....#...##..###.#.#.##...#.##..#.###...#.######.###..##..###.#.#.#....##..
    ..#.#.#.##.####.#..#.....#.##.......##...#..##.#####..###..#..#..####..##.##.#.##...####.#.##..#.##.
    #######.#..###.....##..#.#.#####.#..#.#.##.###..#.......###......##..#####..#.#..##.##....#..#..#..#
    ##.##..###.....##..####.##.###.#.#......#.#.######.#..#......#####.....#######.#.#.#.###.#.###.#.###
    ##.#..##.##...#...#..##..#...#.##.#...#####..##.##..#.#.#..#..##..#..#.#..#........#...#..###..#.##.
    #.#.#...#..###.#......#.#..#.########......##.#.##..#..##..#...###.#..#.#..#.#..#####.##...#########
    .#..#.##.#######.#####.##.####....#..#.#.#.#########.#.###....#.#....###...##.#.#....##....#.###....
    ..######.####....#..##...####..#...#..#...#####.##.#.#....#..#.#######..#....#.#.#..#.#....###..##.#
    ...#.###..#..######.####....##....####.##..#.#.#####...##.#..#..#.###.#.#.#.##....#.###.#..#.#.###..
    #..#.#.#.##.###.###.#....##.#####.#.##.....####.....#.....#.#.###...#.##.#...##.###...##....##.#..#.
    ###..#.##...###..##..#..#.##.#.####...##.#..#.###..#.#..#.#.....#####..#.######..###..#....##..#.##.
    ##..##.###.###.#####.#..##...####.###..###.###.##..#..##...#....##.###.##..###..#.........##.##..#.#
    ##...#....#.##.#.#......####.##....##.##....##...#....#.#.....#....##...##....###..###..###.#.....##
    .####...#..###...#####.#.##...##.....##...####..#####..##...#..##...####.....#.##...#.###...#.##.###
    ##.#..##..#..#.#####...#...##....##.#.#.#.########..#..#.#.###..###...##.##.#.##.#..##.#.##.###.#.#.
    ###.#.###.###......#....#######.#.#..#..##...##.###....###.##.#...##....#...#..#.#...######..##.###.
    #.###.####.###.#.#..##.###..#.##..#...#..#.#..#####..#.#.###.#.#.#..#..#...#.#....######.##.....##.#
    .#...#.#.#..#.##..##..#.##.#####..#....######...#...#.....#.#..##.#...###.##.#######.#.##.#....#.#..
    .#....#...#..#.#.##.#....##....#..#...#..#.##..#.##.##..#..#..#.#.#..##....##.#..#...#..#...##.##...
    ..#.#..#.#...#.###.#.#######.#...##..#.##...#.#.###.#..#.##..#..#.#######.####.#.####..#.##.#.##..#.
    #.#..#######.###..#.####..#.##.#...###.###.#..#.##.#...#...#.#.#.###..#.##.##....#.###...##...#.#..#
    .##...#...##.#.##..####.#.#.#..####.##...##..#..#.#.#..#..#....##.##.##...#.#.#.##.#....#.######...#
    ##.#..#.##.....###.########.##.####...#.####...##.######.###..#######.#..##.#..#..#.#.####..###.#..#
    #.#..####.########...##..##..####..#.##.#..#..#..#..###.######..##.....##.##..#...#....#...##....###
    #############..##..###..#.###.##..###..##...##.#.......#####.#.#..##..#.....##.#..#....##....#.##...
    ####.##.#.#...##.#..#..#.##.##.#.###..#.#.#.....#.#.###..#..##.#.#.##..##.#...##..###....##...##.#.#
    #...##.#....#..#.....##..#.#...##...##..#.#########.#..#.#.##........###.###...##..#####.###.#....#.
    ..#..#...#..##...#..##...#.#.....#.#######.####.##..#.#...#......#.#..####.#........#...#.#..#..##.#
    #.##..##.#.#..##.#.####.#.#..#..#...#####.######..#.#.######...#..##.##..#####.#.#.##...##.#..##..##
    ...##.##.#....###.#...#.##...#..###...##.#.#..#.###.....#...##.......##.###.##..##.#.##...#....##.#.
    ###....##.#.#.#..#....####.#.....##.....#...##.#.....#.###.#####.#..#.##...###.......#...#.....#.#.#
    ....#.#..#.#..##.####.##...#######.#..#.##.##..####..#.#....##..#.....#...#.##.####.##.#####.#######
    #..#..#.###....#.##.#.#.##.###.##.###.............#....##.##.###..#...#.#..#.#.#.#...#..#......#####
    ...##..##..#....####.#..##.#.#.#.#.....#.#..###...##.##....#####......#####.##..###.##.#..###..#...#
    .##..#.#.#.##.###.#.#..##...#.##..#####.######..#.#...#....#...#..##..#.#.....#.#.##..##.#..##.##...
    .#.#.#.#.#..####.#.#.##.....##.##.#.##..###.#..##...##..#....##..#..##...##.#..##..####.#..#.#...#..
    #.#..##.#.#..#...##.##....#.#...###...###.####.#.####.##.#...##.#..##....###..#..#.##.#.#..#.#.##..#
    .###...####.#.###....##..#...#####......##...#...#..#.#..###..#.....##..###.#.###.....#.##..####.#.#
    #..###.#....#..###...#..####.####..#.#####.#.....#...##..##..#...#..#...#.##...##..########..#.##.#.
    ..######..#.####..#..####..#..#...##...#...###.##...#..###.##...#.###.##...#....#....##..##.##.###.#
    ###.#.##..###..#..#........#.#.........##..##.....###.###.#.......###..#.#....##....#.....#.##...###
    ..#.....#.#..###.##.####.#.......#.#.##..##.#.##...####..#.###..#.###.#####.####....#.#...#.#..##..#
    .....######.###..##.#..####..#..##.####.##..##.##...#.#..##...#.##..####.####...##..#.....#.....####
    ###.##.#..#.##.#.#.###....#..#.#..##..#.....###.##.##.#.###.####...##.###..#..##.##..##..##.###...##
    #....####.####.####.#.######...#########..##..#.#....#.......#.##.#.....#.###..#.##....#.##..##.##.#
    ...##..#...#..##..#.###.##..#..###.###....###.####.#.####.#.#.#.#.#....#######.##..###.#.######.##..
    #...#.#.#...#.#.#..#.###.#.#####.#.###.#..##.#.####...#.#.#.....#..####..#.###....##.##..#.#..##.#.#
    ...##..##....#.##.###...##.....###....#..###....#.#.##..###..###..#.#....#.###....#.##..######..#.##
    ...#..#...###...##.###.....#...#.#..#.##..###.#....###.#.#...##.#..##..###.#...#..#..#.##..#...#.#..
    #.....#.###.##..##.#..#..#....#..##.###.##.#.#..##...#....##.##.#.#....#.###..#..###....###.#.#.#.##
    ...##.#..###..##..##.###.#.#..###....#.##..##.#..###...##...#.#.....###.....##.....#.#.##.#.###..#.#
    ..##.##..#...#..#.#.##.##.########.#.######....######.#.###..##...###..#####.##.#..#.##.#.##..######
    .....##.##..#.#.#...###.#.#....##...###.....#.###...#.....###.#......#.#..#.##..#.######.#...####..#
    ..####....####.#......#.##..###.###...##########..##......#..###.#.#...#####.#.#########..###..#....
    #..#..#.#..#..#..##..#.###.#...#.#.####...#.#######...##.##..#..####.#.....#..##.####.##.##.##.#....
    #..#....####.#.###.##...##.###.####.##.######....#.#.#.###.##.##.#.#.##...##.#.#.##.#..#..###.#.....
    .###.#....##.#.###...##.#.##...##.###.#.####.##.#####..#.##....##..##....#######...#..###.#....##...
    .#..#..###.#.##.....##..#.#.###.###..#...#.#.#...#..##..###....#..##........#.#.##..##.####.#.###.#.`;
    
    execute(input);
}